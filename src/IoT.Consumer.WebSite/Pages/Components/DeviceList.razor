@using System.Reactive.Linq
@using IoT.Consumer.WebSite.Devices
@implements IAsyncDisposable
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject ILogger<DeviceService> Logger;


<div class="list-stream-container">
    @if (_onlineDevices.Devices is not null)
    {
        if (_onlineDevices.Devices.Count > 0)
        {
            <a href="javascript:void(0);" class="card-link" @onclick="async () => await RefreshUI()">Refresh</a>
            <table class="table">
                <tr>
                    <th scope="col">Device Id</th>
                    <th scope="col">Model Id</th>
                    <th scope="col">Last Operation</th>
                    <th scope="col">Op. Source</th>
                    <th scope="col">Last Telemetry</th>
                    <th scope="col">Connected</th>
                </tr>

                @foreach (var item in _onlineDevices.Devices.OrderBy(d => d.DeviceId))
                {
                    <tr>
                        <td><a href=/device/@item.DeviceId>@item.DeviceId</a></td>
                        <td>@item.ModelId</td>
                        <td>@(item.LastOperation is not null ? $"[{ item.LastOperationTimestamp }] { item.LastOperation }" : "-")</td>
                        <td>@(item.LastOperation is not null ? item.MessageSource : "-")</td>
                        <td>@item.LastTelemetryTimestamp</td>
                        <td>@(!item.Disconnected) @((item.Disconnected.HasValue && !item.Disconnected.Value) && (item.LastTelemetryTimestamp != null && (item.LastTelemetryTimestamp < DateTime.UtcNow.AddMinutes(-5))) ? "?" : "")</td>
                    </tr>
                }
            </table>

        }
        else
        {
            <div class="alert alert-primary" role="alert">
                Waiting for devices...
            </div>
        }
    }
</div>
@code {
    Timer? _timer;

    OnlineDevicesService? _onlineDevices;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (SynchronizationContext.Current is not null)
        {
            _onlineDevices = new OnlineDevicesService(NavigationManager.BaseUri, Configuration, Logger);
            await _onlineDevices.Subscribe();

        }

        _timer = new Timer(async (object? stateInfo) =>
        {
            await RefreshUI();
        }, new System.Threading.AutoResetEvent(false), 1000, 5000);
    }

    private async Task RefreshUI()
    {
        await InvokeAsync(() => StateHasChanged());
    }

    public async ValueTask DisposeAsync()
    {
        _timer?.Dispose();
        if (_onlineDevices is not null)
        {
            await _onlineDevices.DisposeAsync();
        }
    }
}
