@using System.Reactive.Linq
@using IoT.Consumer.WebSite.Events
@using IoT.Consumer.WebSite.SignalR
@using Microsoft.AspNetCore.SignalR.Client;
@using Microsoft.AspNetCore.WebUtilities;
@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@inject ILogger<IotEventsHubClient> Logger

@if (_events is not null)
{
    <div class="list-stream-container" style="height: 630px">
        <h5>Device Events (web instance '@System.Environment.MachineName')</h5>
        @if (_events.Count > 0)
        {
            <a href="javascript:void(0);" class="card-link" @onclick="() => _events?.Clear()">Clear</a>
            <table class="table">
                <tr>
                    <th scope="col">Enqueued Time</th>
                    <th scope="col">Source</th>
                    <th scope="col">Operation</th>
                    <th scope="col">DeviceId</th>
                    <th scope="col">Dt. Schema</th>
                    <th scope="col">Dt. Component</th>
                    <th scope="col">Body</th>
                </tr>
                @foreach (var item in _events)
                {
                    <tr style="vertical-align:top">
                        <td>@item.EnqueuedTime</td>
                        <td>@item.MessageSource</td>
                        <td>@item.Operation</td>
                        <td>@item.DeviceId</td>
                        <td>@item.DataSchema</td>
                        <td>@item.Component</td>
                        <td><pre>@item.Body</pre></td>
                    </tr>
                }
            </table>

        }
        else if (!string.IsNullOrWhiteSpace(_message))
        {
            <div class="alert alert-primary" role="alert">
                @_message
            </div>
        }
        else
        {
            <div class="alert alert-primary" role="alert">
                Waiting for devices events...
            </div>
        }
    </div>
}

<div style="height: 7px"></div>



@code {
    // on-screen (error) message
    private string _message;

    // list of messages events
    private List<Event> _events = new List<Event>();
    private IotEventsHubClient? _iotEventsHubClient;

    protected override async Task OnInitializedAsync()
    {
        //await ConnectToSignalrAsync();
        await base.OnInitializedAsync();
        if (SynchronizationContext.Current is not null)
        {
            _iotEventsHubClient = new IotEventsHubClient(Logger, NavigationManager.BaseUri);
            await _iotEventsHubClient.SubscribeTelemetryAsync(ProcessTelemetryMessage);
        }

    }

    private void ProcessTelemetryMessage(Event deviceEvent)
    {
        _events.Add(deviceEvent);

        // Inform blazor the UI needs updating
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (_iotEventsHubClient is not null)
        {
            await _iotEventsHubClient.DisposeAsync();
        }
    }
}